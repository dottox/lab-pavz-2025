Se pide: Implementar en C++

[❌] 1. Todas las clases (incluyendo sus atributos, pseudoatributos, getters, setters, constructores y
destructores), enumerados y datatypes que aparecen en el diagrama. Para las fechas en caso de
recibir dd > 31 o dd < 1 o mm > 12 o mm < 1 o aaaa < 1900, se debe levantar la excepción
std::invalid_argument.

2. Una función main que implemente las siguientes operaciones:
    [❌] a) void agregarSocio(string ci, string nombre)
    Crea un nuevo socio en el sistema. En caso de ya existir, levanta la excepción
    std::invalid_argument.

    [❌] b) void agregarClase(DtClase clase)
    Crea una nueva clase en el sistema. En caso de ya existir, levanta una excepción
    std::invalid_argument.

    [❌] c) void agregarInscripcion(String ciSocio, int idClase, Fecha fecha)
    Crea una inscripción de un socio a una clase. La inscripción tiene lugar siempre y
    cuando el socio y la clase existan, de lo contrario se levanta una excepción
    std::invalid_argument. Si ya existe una inscripción de ese usuario para esa clase, o si
    el cupo de esa clase ya fue alcanzado, también se levanta una excepción
    std::invalid_argument.

    [❌] d) void borrarInscripcion(string ciSocio, int idClase)
    Borra la inscripción de un socio a una clase. Si no existe una inscripción de ese
    usuario para esa clase, se levanta una excepción std::invalid_argument.

    [❌] e) DtSocio ** obtenerInfoSociosPorClase (id idClase, int & cantSocios)
    Retorna un arreglo con los socios que están inscriptos a determinada clase. El largo
    del arreglo de socios deberá ser cargado en el parámetro cantSocios.

    [❌] f) DtClase obtenerClase(int idClase)
    Retorna la información de la clase identificada por idClase. 